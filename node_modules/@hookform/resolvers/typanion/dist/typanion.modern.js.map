{"version":3,"file":"typanion.modern.js","sources":["../src/typanion.ts"],"sourcesContent":["import type { FieldErrors } from 'react-hook-form';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport type { Resolver } from './types';\n\nconst parseErrors = (\n  errors: string[],\n  parsedErrors: FieldErrors = {},\n  _path = '',\n) => {\n  return errors.reduce((acc, error) => {\n    const [_key, _message] = error.split(':')\n    const key = _key.slice(1)\n    const message = _message.trim()\n\n    acc[key] = {\n      message,\n    };\n\n    return acc;\n  }, parsedErrors);\n};\n\nexport const typanionResolver: Resolver =\n  (validator, validatorOptions = {}) =>\n    (values, _, options) => {\n      const rawErrors: string[] = []\n      const isValid = validator(values, {errors: rawErrors, ...validatorOptions})\n      const parsedErrors = parseErrors(rawErrors)\n\n      if (!isValid) {\n        return { values: {}, errors: toNestError(parsedErrors, options) };\n      }\n\n      options.shouldUseNativeValidation && validateFieldsNatively(parsedErrors, options);\n\n      return { values, errors: {} };\n    };"],"names":["typanionResolver","validator","validatorOptions","values","_","options","rawErrors","isValid","errors","parsedErrors","_path","reduce","acc","error","_key","_message","split","key","slice","message","trim","parseErrors","shouldUseNativeValidation","validateFieldsNatively","toNestError"],"mappings":"6RAIA,MAkBaA,EACX,CAACC,EAAWC,EAAmB,KAC7B,CAACC,EAAQC,EAAGC,KACV,MAAMC,EAAsB,GACtBC,EAAUN,EAAUE,KAASK,OAAQF,GAAcJ,IACnDO,EAvBQ,EAClBD,EACAC,EAA4B,GAC5BC,EAAQ,KAEDF,EAAOG,OAAO,CAACC,EAAKC,KACzB,MAAOC,EAAMC,GAAYF,EAAMG,MAAM,KAC/BC,EAAMH,EAAKI,MAAM,GACjBC,EAAUJ,EAASK,OAMzB,OAJAR,EAAIK,GAAO,CACTE,QAAAA,GAGKP,GACNH,GAQsBY,CAAYf,GAEjC,OAAKC,GAILF,EAAQiB,2BAA6BC,EAAuBd,EAAcJ,GAEnE,CAAEF,OAAAA,EAAQK,OAAQ,KALhB,CAAEL,OAAQ,GAAIK,OAAQgB,EAAYf,EAAcJ"}